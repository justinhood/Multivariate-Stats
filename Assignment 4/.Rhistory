gpa=c(3.26,2.60,3.35,2.86,3.82,2.21,3.47)
salary=c(33.8,29.8,33.5,30.4,36.4,27.6,35.3)
mean(gpa)
sum(gpa*gpa)-(sum(gpa)**2)/7
1/7
1/7+((3.25-mean(gpa))**2)/(sum(gpa*gpa)-(sum(gpa)**2)/7)
2.447*.536321*sqrt(.158295)
33.362+2.447*.536321*sqrt(.158295)
33.362-2.447*.536321*sqrt(.158295)
33.362-2.571*.536321*sqrt(.158295)
33.362+2.571*.536321*sqrt(.158295)
33.362-2.571*.536321*sqrt(1+.158295)
33.362+2.571*.536321*sqrt(1+.158295)
11.46409+24.60221*4
11.46409+24.60221*5
138.1968-24.60221
time=c(8.0,4.7,3.7,2.8,8.9)
experience=c(1,8,4,16,1)
time=c(8.0,4.7,3.7,2.8,8.9,5.8,2.0,1.9,3.3)
experience=c(1,8,4,16,1,2,12,5,3)
plot(experience,time)
plot(experience,1/time)
invtime=time^(-1)
invexp=experience^(-1)
plot(invexp, time)
delete invtime
delete(invtime)
rm(invtime)
clear
rm(plot)
plot(invexp,time)
rm(all)
clc
experience=(1 8 4 16 1 2 12 5 3)
experience=(1,8,4,16,1,2,12,5,3)
experience=c(1 8 4 16 1 2 12 5 3)
experience=c(1,8,4,16,1,2,12,5,3)
experience=c(1,8,4,16,1,2,12,5,3)
time=c(8,4.7,3.7,2.8,8.9,5.8,2.0,1.9,3.3)
invexp=experience^(-1)
plot(invexp,time)
mod=lm(time ~ invexp)
summary(mod_)
summary(mod)
model.response(5)
2.0575+6.3537*5
2.0575+6.3537/5
SSE=sum(time**2)-(2.0575*sum(time)+6.3537*sum(time*invexp))
s2=SSE/7
s=sqrt(s2)
SSxx=sum(invexp**2)-((sum(invexp)))
SSxx=sum(invexp**2)-((sum(invexp))**2/9)
mean(invexp)
dist=1/9+((.2-mean(invexp))**2)/SSxx
v=s*2.365*sqrt(1+dist)
3.32824+v
3.32824-v
invexp
x=c(1,2,3)
y=c(4,5,6)
mod<- lm(y~x)
summary mod
summary(mod)
sum(x^2)
sum(y)
sum(x)
sum(xy)
sum(x*y)
x=c(1,2,3)
y=c(4,5,6)
mod <- lm(y~x)
summary(mod)
3*mean(y)*sum(x**2)-3*mean(x)*sum(x*y)
sum(x**2)-9*mean(x)**2
3*sum(x**2)-98mean(x)**2
3*sum(x**2)-9*mean(x)**2
3*sum(x*y)-9*mean(x)*mean(y)
clear()
comb=function(a,b){}
choose(9850,99)
x0=choose(150,0)*choose(9850,100)/choose(10000,100)
x0=choose(150,1)*choose(9850,99)/choose(10000,100)
x0=choose(150,0)*choose(9850,100)/choose(10000,100)
x1=choose(150,1)*choose(9850,99)/choose(10000,100)
p=x0+x1
p
x=choose(150,5)*choose(9850,95)/choose(10000,100)
for(i in 1:100){}
for(i in 1:100){
i+=1
}
s=0
i=1
for(i in 0:100){
s=s+choose(150,i)*choose(9850,100-i)/choose(10000,100)
}
s
2x0=choose(25,0)*choose(4975,100)/choose(5000,100)
r0=choose(25,0)*choose(4975,100)/choose(5000,100)
r1=choose(25,1)*choose(4975,99)/choose(5000,100)
1-r0-r1
s=0
for(i in 0:100){
s=s+choose(25,i)*choose(4975,100-i)/choose(5000,100)
}
t=pnorm(10.45,10.48,0.0142)
t
t2=pnorm(10.55,10.48,.0142)
t2=1-t2
t+t2
t
t2=pnorm(10.55,10.48,.0142)
t2
t2=1-t2
t2
exp(-97/1000)
exp(-97/1000)*(97/1000)/1
s=0
for(i in 0:97){
s=s+exp(-97/1000)*[(97/1000)**i]/(i!)
}
for(i in 0:97){
s=s+exp(-97/1000)*((97/1000)**i)/(i!)
}
for(i in 0:97){
s=s+exp(-97/1000)*((97/1000)**i)/(factorial(i))
}
exp(-97/1000)+exp(-97/1000)*(97/1000)/1
500*(exp(-97/1000)+exp(-97/1000)*(97/1000)/1)
## 3.14 ##
rm(list = ls())
X <- matrix(c(9,1,
5,3,
1,2), byrow=TRUE,ncol = 2)
b1=2*X[1,1]+3*X[1,2]
b2=2*X[2,1]+3*X[2,2]
b3=2*X[3,1]+3*X[3,2]
B=c(b1,b2,b3)
bmean=mean(B)
bvar=var(B)
c1=-1*X[1,1]+2*X[1,2]
c2=-1*X[2,1]+2*X[2,2]
c3=-1*X[3,1]+2*X[3,2]
C=c(c1,c2,c3)
cmean=mean(C)
cvar=var(C)
oldcov=cov(B,C)
##################
xbar=matrix(c(mean(X[,1]),mean(X[,2])),byrow = TRUE,ncol = 2)
Xadj=X
for (i in 1:3) {
for (j in 1:2) {
Xadj[i,j]=X[i,j]-xbar[,j]
}
}
Xadj
S=(t(Xadj)%*%Xadj)/2
S
setwd("~/Desktop/PSM/Spring 2019/Multivariate-Stats/Assignment 4")
setwd("~/Desktop/PSM/Spring 2019/Multivariate-Stats/Assignment 4")
### 4.18 ###
X <- matrix(c(3,6,
4,4,
5,7,
4,7), byrow=TRUE, ncol = 2)
xbar <- matrix(c(mean(X[,1]),
mean(X[,2])), byrow=TRUE, ncol = 1)
X[1,]
xbar
S=S+(t(X[i,])-xbar)%*%t(t(X[i,])-xbar)
(S <- matrix(rep(NA,2*2),ncol=2))
X[1,]
xbar
for (i in 1:1) {
S=S+(t(X[i,])-xbar)%*%t(t(X[i,])-xbar)
}
X[1,]-xbar
S=S+(X[i,]-xbar)%*%t(X[i,]-xbar)
for (i in 1:1) {
S=S+(X[i,]-xbar)%*%t(X[i,]-xbar)
}
(S)
(S <- matrix(c(0,0,
0,0),ncol=2))
X[1,]-xbar
for (i in 1:1) {
S=S+(X[i,]-xbar)%*%t(X[i,]-xbar)
}
(S)
for (i in 1:4) {
S=S+(X[i,]-xbar)%*%t(X[i,]-xbar)
}
(S)
(S <- matrix(c(0,0,
0,0),ncol=2))
for (i in 1:4) {
S=S+(X[i,]-xbar)%*%t(X[i,]-xbar)
}
(S)
## 4.25 ##
rm(list = ls())
X <- read.table("P1-4.dat",header = FALSE)
setwd("~/Desktop/PSM/Spring 2019/Multivariate-Stats/Assignment 4")
X <- read.table("P1-4.dat",header = FALSE)
dat <- read.table("P1-4.dat", header = FALSE)
dat <- read.table("P1-4.DAT", header = FALSE)
names(dat) <- c("X1","X2","X3")
library(MASS) # Venables & Ripley, (2002), Modern Applied Statistics with S
# Example 4.1
set.seed(1)
mu <- c(0,0)
Sigmaa <- matrix(c(1,0,0,1),ncol=2)
Sigmab <- matrix(c(1,.75,.75,1),ncol=2)
dat1 <- mvrnorm(5000, mu = mu, Sigma = Sigmaa)
dat2 <- mvrnorm(5000, mu = mu, Sigma = Sigmab)
kde1 <- kde2d(dat1[,1],dat1[,2],n=100)
kde2 <- kde2d(dat2[,1],dat2[,2],n=100)
persp(kde1,phi=45,theta=30,shade=0.3,border=NA)
filled.contour(kde1)
persp(kde2,phi=45,theta=30,shade=0.3,border=NA)
filled.contour(kde2)
## 4.25 ##
rm(list = ls())
# Example 4.12
x1 <- matrix(c(108.28,152.36,95.04,65.45,62.97,263.99,265.19,285.06,92.01,165.68),ncol=1)
x2 <- matrix(c(17.05,16.59,10.91,14.14,9.52,25.33,18.54,15.73,8.10,11.13),ncol=1)
X <- cbind(x1,x2)
n <- nrow(X)
p <- ncol(X)
(x.bar <- t(matrix(1,ncol=n) %*% X)/n)
(D <- X - matrix(1,nrow=n) %*% t(x.bar))
(S <- (n-1)^(-1) * t(D)%*%D)
Sinv <- solve(S)
d <- c()
for (i in 1:n){
d[i] <- (X[i,]-t(x.bar))%*%Sinv%*%t(X[i,]-t(x.bar))
}
print(d)
(cutoff <- qchisq(0.50,2))
which(d<cutoff)
sum(d<cutoff)/n # 40% of data fall within 50% contour
# Example 4.13
chisq.quantiles <- qchisq(((1:n)-0.5)/n,df=2)
names(dat) <- c("X1","X2","X3")
dat <- read.table("P1-4.DAT", header = FALSE)
names(dat) <- c("X1","X2","X3")
dat$X1
X <- read.table("P1-4.DAT", header = FALSE)
names(X) <- c("X1","X2","X3")
n <- nrow(X)
n
p <- ncol(X)
(x.bar <- t(matrix(1,ncol=n) %*% X)/n)
X=t(X)
(x.bar <- t(matrix(1,ncol=n) %*% X)/n)
(x.bar <- t(matrix(1,ncol=n) %*% X)/n)
X1 <- X$X1
X <- read.table("P1-4.DAT", header = FALSE)
names(X) <- c("X1","X2","X3")
X1 <- X$X1
X1
X1 <- X$X1[1,]
X1 <- X$X1[,1]
X1 <- X$X1[1]
X1 <- X$X1[,]
X1 <- matrix(c(108.28,152.36,95.04,65.45,62.97,263.99,265.19,285.06,92.01,165.68),ncol=1)
X2 <- matrix(c(17.05,16.59,10.91,14.14,9.52,25.33,18.54,15.73,8.10,11.13),ncol=1)
X3 <- matrix(c(1484.1,750.33,766.42,1110.46,1031.29,195.26,193.83,191.11,1175.16,211.15),ncol=1)
## 4.25 ##
rm(list = ls())
X1 <- matrix(c(108.28,152.36,95.04,65.45,62.97,263.99,265.19,285.06,92.01,165.68),ncol=1)
X2 <- matrix(c(17.05,16.59,10.91,14.14,9.52,25.33,18.54,15.73,8.10,11.13),ncol=1)
X3 <- matrix(c(1484.1,750.33,766.42,1110.46,1031.29,195.26,193.83,191.11,1175.16,211.15),ncol=1)
n <- nrow(X)
X <- cbind(X1,X2,X3)
n <- nrow(X)
p <- ncol(X)
(x.bar <- t(matrix(1,ncol=n) %*% X)/n)
(D <- X - matrix(1,nrow=n) %*% t(x.bar))
(S <- (n-1)^(-1) * t(D)%*%D)
Sinv <- solve(S)
(Sinv <- solve(S))
d <- c()
for (i in 1:n){
d[i] <- (X[i,]-t(x.bar))%*%Sinv%*%t(X[i,]-t(x.bar))
}
print(d)
(cutoff <- qchisq(0.50,2))
which(d<cutoff)
sum(d<cutoff)/n # 40% of data fall within 50% contour
# Example 4.13
chisq.quantiles <- qchisq(((1:n)-0.5)/n,df=2)
plot(y=sort(d),x=chisq.quantiles,pch=19)
chisq.quantiles <- c(.3518,.7978,1.2125,1.6416,2.1095,2.6430,3.2831,4.1083,5.317,7.8147)
plot(y=sort(d),x=chisq.quantiles,pch=19)
png("4.25.png")
plot(y=sort(d),x=chisq.quantiles,pch=19)
dev.off()
png("425.png")
plot(y=sort(d),x=chisq.quantiles,pch=19)
dev.off()
### 4.25 ###
rm(list = ls())
X <- scan("T1-5.dat")
X <- matrix(X,ncol = 7, byrow=TRUE)
Xadj <- X[5:6,]
X
Xadj
Xadj <- X[,5:6]
X
Xadj
n <- nrow(X)
n <- nrow(Xadj)
p <- ncol(Xadj)
(x.bar <- t(matrix(1,ncol=n) %*% X)/n)
n <- nrow(Xadj)
p <- ncol(Xadj)
(x.bar <- t(matrix(1,ncol=n) %*% Xadj)/n)
Xadj
(D <- Xadj - matrix(1,nrow=n) %*% t(x.bar))
(S <- (n-1)^(-1) * t(D)%*%D)
(Sinv <- solve(S))
d <- c()
for (i in 1:n){
d[i] <- (X[i,]-t(x.bar))%*%Sinv%*%t(X[i,]-t(x.bar))
}
for (i in 1:n){
d[i] <- (Xadj[i,]-t(x.bar))%*%Sinv%*%t(Xadj[i,]-t(x.bar))
}
print(d)
(cutoff <- qchisq(0.50,2))
which(d<cutoff)
sum(d<cutoff)/n # 40% of data fall within 50% contour
chisq.quantiles <- qchisq(((1:n)-0.5)/n,df=2)
plot(y=sort(d),x=chisq.quantiles,pch=19)
d
(cutoff <- qchisq(0.50,2))
which(d<cutoff)
sum(d<cutoff)/n # 40% of data fall within 50% contour
png("429.png")
plot(y=sort(d),x=chisq.quantiles,pch=19)
dev.off()
