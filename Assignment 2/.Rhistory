gpa=c(3.26,2.60,3.35,2.86,3.82,2.21,3.47)
salary=c(33.8,29.8,33.5,30.4,36.4,27.6,35.3)
mean(gpa)
sum(gpa*gpa)-(sum(gpa)**2)/7
1/7
1/7+((3.25-mean(gpa))**2)/(sum(gpa*gpa)-(sum(gpa)**2)/7)
2.447*.536321*sqrt(.158295)
33.362+2.447*.536321*sqrt(.158295)
33.362-2.447*.536321*sqrt(.158295)
33.362-2.571*.536321*sqrt(.158295)
33.362+2.571*.536321*sqrt(.158295)
33.362-2.571*.536321*sqrt(1+.158295)
33.362+2.571*.536321*sqrt(1+.158295)
11.46409+24.60221*4
11.46409+24.60221*5
138.1968-24.60221
time=c(8.0,4.7,3.7,2.8,8.9)
experience=c(1,8,4,16,1)
time=c(8.0,4.7,3.7,2.8,8.9,5.8,2.0,1.9,3.3)
experience=c(1,8,4,16,1,2,12,5,3)
plot(experience,time)
plot(experience,1/time)
invtime=time^(-1)
invexp=experience^(-1)
plot(invexp, time)
delete invtime
delete(invtime)
rm(invtime)
clear
rm(plot)
plot(invexp,time)
rm(all)
clc
experience=(1 8 4 16 1 2 12 5 3)
experience=(1,8,4,16,1,2,12,5,3)
experience=c(1 8 4 16 1 2 12 5 3)
experience=c(1,8,4,16,1,2,12,5,3)
experience=c(1,8,4,16,1,2,12,5,3)
time=c(8,4.7,3.7,2.8,8.9,5.8,2.0,1.9,3.3)
invexp=experience^(-1)
plot(invexp,time)
mod=lm(time ~ invexp)
summary(mod_)
summary(mod)
model.response(5)
2.0575+6.3537*5
2.0575+6.3537/5
SSE=sum(time**2)-(2.0575*sum(time)+6.3537*sum(time*invexp))
s2=SSE/7
s=sqrt(s2)
SSxx=sum(invexp**2)-((sum(invexp)))
SSxx=sum(invexp**2)-((sum(invexp))**2/9)
mean(invexp)
dist=1/9+((.2-mean(invexp))**2)/SSxx
v=s*2.365*sqrt(1+dist)
3.32824+v
3.32824-v
invexp
x=c(1,2,3)
y=c(4,5,6)
mod<- lm(y~x)
summary mod
summary(mod)
sum(x^2)
sum(y)
sum(x)
sum(xy)
sum(x*y)
x=c(1,2,3)
y=c(4,5,6)
mod <- lm(y~x)
summary(mod)
3*mean(y)*sum(x**2)-3*mean(x)*sum(x*y)
sum(x**2)-9*mean(x)**2
3*sum(x**2)-98mean(x)**2
3*sum(x**2)-9*mean(x)**2
3*sum(x*y)-9*mean(x)*mean(y)
clear()
comb=function(a,b){}
choose(9850,99)
x0=choose(150,0)*choose(9850,100)/choose(10000,100)
x0=choose(150,1)*choose(9850,99)/choose(10000,100)
x0=choose(150,0)*choose(9850,100)/choose(10000,100)
x1=choose(150,1)*choose(9850,99)/choose(10000,100)
p=x0+x1
p
x=choose(150,5)*choose(9850,95)/choose(10000,100)
for(i in 1:100){}
for(i in 1:100){
i+=1
}
s=0
i=1
for(i in 0:100){
s=s+choose(150,i)*choose(9850,100-i)/choose(10000,100)
}
s
2x0=choose(25,0)*choose(4975,100)/choose(5000,100)
r0=choose(25,0)*choose(4975,100)/choose(5000,100)
r1=choose(25,1)*choose(4975,99)/choose(5000,100)
1-r0-r1
s=0
for(i in 0:100){
s=s+choose(25,i)*choose(4975,100-i)/choose(5000,100)
}
t=pnorm(10.45,10.48,0.0142)
t
t2=pnorm(10.55,10.48,.0142)
t2=1-t2
t+t2
t
t2=pnorm(10.55,10.48,.0142)
t2
t2=1-t2
t2
exp(-97/1000)
exp(-97/1000)*(97/1000)/1
s=0
for(i in 0:97){
s=s+exp(-97/1000)*[(97/1000)**i]/(i!)
}
for(i in 0:97){
s=s+exp(-97/1000)*((97/1000)**i)/(i!)
}
for(i in 0:97){
s=s+exp(-97/1000)*((97/1000)**i)/(factorial(i))
}
exp(-97/1000)+exp(-97/1000)*(97/1000)/1
500*(exp(-97/1000)+exp(-97/1000)*(97/1000)/1)
x <- matrix(c(5,1,3),ncol=1)
y <- matrix(c(-1,3,1),ncol=1)
help(vectors3d)
library(rgl)
install.packages("rgl")
install.packages("rgl")
install.packages("rgl")
help(vectors3d)
library(rgl)
help(vectors3d)
vec <- rbind(diag(3), c(1,1,1))
vec
rownames(vec) <- c("X", "Y", "Z", "J")
open3d()
vectors3d(vec, color=c(rep("black",3), "red"), lwd=2)
library(rgl)
vectors3d(vec, color=c(rep("black",3), "red"), lwd=2)
install.packages("matlib")
library(matlib)
vectors3d(vec, color=c(rep("black",3), "red"), lwd=2)
open3d()
vectors3d(vec, color=c(rep("black",3), "red"))
vectors3d(vec, color=c(rep("black",3), "red"), lwd=2)
vectors3d(vec, color=c(rep("black",3)), lwd=2)
dev.off()
open3d()
open3d()
vectors3d(vec, color=c(rep("black",3)), lwd=2)
A=diag(3)
open3d()
vectors3d(A, color=c(rep("black",3)), lwd=2)
vectors3d(x, color=c(rep("black",3)), lwd=2)
vectors3d(t(x), color=c(rep("black",3)), lwd=2)
A=diag(3)
A=8*A
open3d()
rownames(A) <- c("X", "Y", "Z")
vectors3d(A, color=c(rep("black",3)), lwd=2)
vectors3d(t(x), color=c(rep("red",3)), lwd=2)
png("1x.png")
open3d()
vectors3d(A, color=c(rep("black",3)), lwd=2)
vectors3d(t(x), color=c(rep("red",3)), lwd=2)
dev.off()
ls
ll
setwd("~/Desktop/PSM/Spring 2019/Multivariate-Stats/Assignment 2")
png("1x.png")
open3d()
vectors3d(A, color=c(rep("black",3)), lwd=2)
vectors3d(t(x), color=c(rep("red",3)), lwd=2)
dev.off()
open3d()
vectors3d(A, color=c(rep("black",3)), lwd=2)
vectors3d(t(y), color=c(rep("red",3)), lwd=2)
setwd("~/Desktop/PSM/Spring 2019/Multivariate-Stats/Assignment 2")
x <- matrix(c(5,1,3),ncol=1)
y <- matrix(c(-1,3,1),ncol=1)
Lx <- sqrt(t(x) %*% x)
Ly <- sqrt(t(y) %*% y)
ctheta <- (t(x)%*%y)/(Lx*Ly)
theta <- acos(ctheta)
deg=theta*180/pi
open3d()
vectors3d(A, color=c(rep("black",3)), lwd=2)
A=diag(3)
A=8*A
vectors3d(A, color=c(rep("black",3)), lwd=2)
vectors3d(c(2,-2,0), color=c(rep("red",3)), lwd=2)
n=matrix(c(2,-2,0),ncol=1)
vectors3d(t(n), color=c(rep("red",3)), lwd=2)
open3d()
vectors3d(A, color=c(rep("black",3)), lwd=2)
vectors3d(t(n), color=c(rep("red",3)), lwd=2)
rownames(A) <- c("X", "Y", "Z")
open3d()
vectors3d(A, color=c(rep("black",3)), lwd=2)
vectors3d(t(n), color=c(rep("red",3)), lwd=2)
vectors3d(t(x), color=c(rep("blue",3)), lwd=2)
m <- matrix(c(-2,2,0),ncol=1)
open3d()
vectors3d(A, color=c(rep("black",3)), lwd=2)
vectors3d(t(y), color=c(rep("blue",3)), lwd=2)
vectors3d(t(m), color=c(rep("red",3)), lwd=2)
rm(list = ls())
x <- matrix(c(5,1,3),ncol=1)
y <- matrix(c(-1,3,1),ncol=1)
Lx <- sqrt(t(x) %*% x)
Ly <- sqrt(t(y) %*% y)
ctheta <- (t(x)%*%y)/(Lx*Ly)
theta <- acos(ctheta)
deg=theta*180/pi
## 2.5 ##
rm(list = ls())
Q <- matrix(c(5/13, 12/13,
-12/13, 5/13),byrow = TRUE, ncol=2)
## 2.5 ##
rm(list = ls())
library(MASS)
library(MASS)
Q <- matrix(c(5/13, 12/13,
-12/13, 5/13),byrow = TRUE, ncol=2)
fractions(Q)
diag(3)
t(Q)%*%Q == diag(2)
(t(Q)%*%Q)
diag(2)
(Q%*%t(Q))
t(Q)%*%Q == Q%*%t(Q)
Q%*%t(Q) == diag(2)
Q%*%t(Q) == matrix(c(1,0,
0,1),byrow = TRUE, ncol=2)
A <- matrix(c(9, -2,
-2, 6), byrow = TRUE, ncol=2)
A
A == t(A)
eigen(A)$values
## 2.8 ##
rm(list = ls())
A <- matrix(c(1, 2,
2, -2), byrow = TRUE, ncol=2)
A
lambda <- eigen(A)$values
(lambda <- eigen(A)$values)
(vecs <- eigen(A)$vectors)
spec <- lambda[1]*vecs[,1]%*%t(vecs[,1])+
lambda[2]*vecs[,2]%*%t(vecs[,2])+
lambda[3]*vecs[,3]%*%t(vecs[,3])
spec <- lambda[1]*vecs[,1]%*%t(vecs[,1])+
lambda[2]*vecs[,2]%*%t(vecs[,2])
spec
A == round(spec)
## 2.9 ##
(inver=solve(A))
fractions(inver)
(inver %*% A)
(inverlambda <- eigen(inver)$values)
(invere <- eigen(inver)$vectors)
fractions(inverlambda)
inverlambda
inverlambda=fractions(inverlambda)
fractions(inverlambda)
(invere <- eigen(inver)$vectors)
(vecs)
## 2.15 ##
rm(list = ls())
A <- matrix(c(3, -sqrt(2),
-sqrt(2), 3), byrow = TRUE, ncol=2)
(eigen(A)$values)
## 2.5 ##
rm(list = ls())
## 2.1 ##
x <- matrix(c(5,1,3),ncol=1)
y <- matrix(c(-1,3,1),ncol=1)
Lx <- sqrt(t(x) %*% x)
Ly <- sqrt(t(y) %*% y)
ctheta <- (t(x)%*%y)/(Lx*Ly)
theta <- acos(ctheta)
deg=theta*180/pi
(prj <- (t(x)%*%y)/(Ly**2)%*%y)
(prj <- (t(x)%*%y)/(Ly**2))
prj <- prj * y
prj <- prj %*% y
prj <- prj[1] %*% y
prj[1]
prj[1,1]
prj
prj <- prj[1,1] * y
## 2.5 ##
rm(list = ls())
library(MASS)
Q <- matrix(c(5/13, 12/13,
-12/13, 5/13),byrow = TRUE, ncol=2)
fractions(Q)
(t(Q)%*%Q)
(Q%*%t(Q))
t(Q)%*%Q == Q%*%t(Q)
## 2.6 ##
rm(list = ls())
A <- matrix(c(9, -2,
-2, 6), byrow = TRUE, ncol=2)
A == t(A)
eigen(A)$values
## 2.8 ##
rm(list = ls())
A <- matrix(c(1, 2,
2, -2), byrow = TRUE, ncol=2)
(lambda <- eigen(A)$values)
(vecs <- eigen(A)$vectors)
(spec <- lambda[1]*vecs[,1]%*%t(vecs[,1])+
lambda[2]*vecs[,2]%*%t(vecs[,2]))
A == round(spec)
## 2.9 ##
(inver=solve(A))
fractions(inver)
(inver %*% A)
(inverlambda <- eigen(inver)$values)
fractions(inverlambda)
(invere <- eigen(inver)$vectors)
(vecs)
## 2.15 ##
rm(list = ls())
A <- matrix(c(3, -1,
-1, 3), byrow = TRUE, ncol=2)
(eigen(A)$values)
## 2.18 ##
rm(list = ls())
A <- matrix(c(4, -sqrt(2),
-sqrt(2), 3), byrow = TRUE, ncol=2)
(eigen(A)$values)
(eigen(A)$vectors)
## 2.21 ##
rm(list = ls())
A <- matrix(c(1,1,
2,-2,
2,2), byrow = TRUE, ncol=2)
(A)
B <- t(A)%*%A
B
(eigen(B)$values)
(eigen(B)$vectors)
C <- A%*%t(A)
(eigen(C)$values)
(eigen(C)$vectors)
(C <- A%*%t(A))
## 2.25 ##
rm(list = ls())
sig <- matrix(c(25, -2, 4,
-2,4,1,
4,1,9), byrow = TRUE, ncol=3)
sig
(vhalf <- matrix(rep(NA,3*3),ncol=3))
if(i == j){
vhalf[i,j] = sqrt(sig[i,i])
} else{
vhalf[i,j] = 0
}
(vhalf <- matrix(rep(NA,3*3),ncol=3))
for(i in 1:7){
for(j in 1:7){
if(i == j){
vhalf[i,j] = sqrt(sig[i,i])
} else{
vhalf[i,j] = 0
}
}
}
for(i in 1:3){
for(j in 1:3){
if(i == j){
vhalf[i,j] = sqrt(sig[i,i])
} else{
vhalf[i,j] = 0
}
}
}
(vhalf)
(vinv=solve(vhalf))
rho <- matrix(rep(NA,3*3),ncol=3)
for(i in 1:3){
for(j in 1:3){
rho[i,j]=sig[i,j]/(sqrt(sig[i,i])*sqrt([j,j]))
}
}
for(i in 1:3){
for(j in 1:3){
rho[i,j]=sig[i,j]/(sqrt(sig[i,i])*sqrt(sig[j,j]))
}
}
(rho)
fractions(rho)
(vhalf %*% rho %*% vhalf)
(rho)
fractions(rho)
(sig == round(vhalf %*% rho %*% vhalf))
## 2.5 ##
rm(list = ls())
setwd("~/Desktop/PSM/Spring 2019/Multivariate-Stats/Assignment 2")
## 2.1 ##
x <- matrix(c(5,1,3),ncol=1)
y <- matrix(c(-1,3,1),ncol=1)
Lx <- sqrt(t(x) %*% x)
Ly <- sqrt(t(y) %*% y)
ctheta <- (t(x)%*%y)/(Lx*Ly)
theta <- acos(ctheta)
deg=theta*180/pi
(prj <- (t(x)%*%y)/(Ly**2))
prj <- prj[1,1] * y
## 2.5 ##
rm(list = ls())
library(MASS)
Q <- matrix(c(5/13, 12/13,
-12/13, 5/13),byrow = TRUE, ncol=2)
fractions(Q)
(t(Q)%*%Q)
(Q%*%t(Q))
t(Q)%*%Q == Q%*%t(Q)
## 2.6 ##
rm(list = ls())
A <- matrix(c(9, -2,
-2, 6), byrow = TRUE, ncol=2)
A == t(A)
eigen(A)$values
## 2.8 ##
rm(list = ls())
A <- matrix(c(1, 2,
2, -2), byrow = TRUE, ncol=2)
(lambda <- eigen(A)$values)
(vecs <- eigen(A)$vectors)
(spec <- lambda[1]*vecs[,1]%*%t(vecs[,1])+
lambda[2]*vecs[,2]%*%t(vecs[,2]))
A == round(spec)
## 2.9 ##
(inver=solve(A))
fractions(inver)
(inver %*% A)
(inverlambda <- eigen(inver)$values)
fractions(inverlambda)
(invere <- eigen(inver)$vectors)
(vecs)
## 2.15 ##
rm(list = ls())
A <- matrix(c(3, -1,
-1, 3), byrow = TRUE, ncol=2)
(eigen(A)$values)
## 2.18 ##
rm(list = ls())
A <- matrix(c(4, -sqrt(2),
-sqrt(2), 3), byrow = TRUE, ncol=2)
(eigen(A)$values)
(eigen(A)$vectors)
## 2.21 ##
rm(list = ls())
A <- matrix(c(1,1,
2,-2,
2,2), byrow = TRUE, ncol=2)
B <- t(A)%*%A
(eigen(B)$values)
(eigen(B)$vectors)
(C <- A%*%t(A))
(eigen(C)$values)
(eigen(C)$vectors)
## 2.25 ##
rm(list = ls())
sig <- matrix(c(25, -2, 4,
-2,4,1,
4,1,9), byrow = TRUE, ncol=3)
(vhalf <- matrix(rep(NA,3*3),ncol=3))
for(i in 1:3){
for(j in 1:3){
if(i == j){
vhalf[i,j] = sqrt(sig[i,i])
} else{
vhalf[i,j] = 0
}
}
}
(vhalf)
(vinv=solve(vhalf))
rho <- matrix(rep(NA,3*3),ncol=3)
for(i in 1:3){
for(j in 1:3){
rho[i,j]=sig[i,j]/(sqrt(sig[i,i])*sqrt(sig[j,j]))
}
}
(rho)
fractions(rho)
(vhalf %*% rho %*% vhalf)
(sig == round(vhalf %*% rho %*% vhalf))
